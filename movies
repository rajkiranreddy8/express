const express = require('express')
const app = express()

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const path = require('path')
const dbPath = path.join(__dirname, 'moviesData.db')
app.use(express.json())

let db = null

const initializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log(`Server is running`)
    })
  } catch (e) {
    console.log(`DB error: ${e.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const convertDbObjectToResponseObject = dbObject => {
  return {
    movieId: dbObject.movie_id,
    directorId: dbObject.director_id,
    movieName: dbObject.movie_name,
    leadActor: dbObject.lead_actor,
  }
}

// API 1 all movie names in the movie table
app.get('/movies/', async (request, response) => {
  const allMoviesQuery = ` select movie_name from movie; `
  const moviesArray = await db.all(allMoviesQuery)
  response.send(
    moviesArray.map(eachMovie => {
      return {movieName: eachMovie.movie_name}
    }),
  )
})

// API 2 creating a new movie
app.post('/movies/', async (request, response) => {
  const {directorId, movieName, leadActor} = request.body
  const addMovieQuery = `
    insert into movie (director_id, movie_name, lead_actor) values('${directorId}', '${movieName}', '${leadActor}')
  `
  const insertedMovie = await db.run(addMovieQuery)
  response.send('Movie Successfully Added')
})

// API 3 returns movie based on movie id

app.get('/movies/:movieId', async (request, response) => {
  const {movieId} = request.params
  const movieNameById = `select * from movie where movie_id = '${movieId}' ; `
  const movie = await db.get(movieNameById) // database object need to be converted to response object
  response.send(convertDbObjectToResponseObject(movie))
})

module.exports = app
